WordprocessingDocument wordDocument;

            using (MemoryStream mem = new MemoryStream())
            {
                using (wordDocument = WordprocessingDocument.Create(mem, WordprocessingDocumentType.Document))
                {
                    wordDocument.AddMainDocumentPart();

                    Document doc = new Document();
                    Body body = new Body();

                    Paragraph para = new Paragraph();

                    ParagraphProperties paragraphProperties1 = new ParagraphProperties();
                    ParagraphStyleId paragraphStyleId1 = new ParagraphStyleId() { Val = "Normal" };
                    Justification justification1 = new Justification() { Val = JustificationValues.Center };
                    ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();

                    paragraphProperties1.Append(paragraphStyleId1);
                    paragraphProperties1.Append(justification1);
                    paragraphProperties1.Append(paragraphMarkRunProperties1);

                    Run run = new Run();
                    RunProperties runProperties1 = new RunProperties();

                    Text text = new Text() { Text = "Assessment Survey Results" };

                    run.Append(runProperties1);
                    run.Append(text);
                    para.Append(paragraphProperties1);
                    para.Append(run);

                    Paragraph para2 = new Paragraph();

                    ParagraphProperties paragraphProperties2 = new ParagraphProperties();
                    ParagraphStyleId paragraphStyleId2 = new ParagraphStyleId() { Val = "Normal" };
                    Justification justification2 = new Justification() { Val = JustificationValues.Left };
                    ParagraphMarkRunProperties paragraphMarkRunProperties2 = new ParagraphMarkRunProperties();

                    paragraphProperties2.Append(paragraphStyleId2);
                    paragraphProperties2.Append(justification2);
                    paragraphProperties2.Append(paragraphMarkRunProperties2);

                    Run run2 = new Run();
                    RunProperties runProperties3 = new RunProperties();
                    Text text2 = new Text();
                    text2.Text = "Testing";

                    var weightedScoreByGroups = scoredResults.Item1;
                    var finalScore = scoredResults.Item2;

///// below you can pull your data in and append it to the doc here
                    foreach (WeightedScoreByGroup weightedScoreByGroup in weightedScoreByGroups)
                    {
                        run2.AppendChild(new Break());
                        run2.AppendChild(new Text("Final Score"));
                        run2.AppendChild(new Break());
                        run2.AppendChild(new Text("Here is the final score!"));
                        run2.AppendChild(new Break());
                        run2.AppendChild(new Text(weightedScoreByGroup.TotalWeightedScore.ToString()));
                    }

                    para2.Append(paragraphProperties2);
                    para2.Append(run2);

                    body.Append(para);
                    body.Append(para2);

                    doc.Append(body);

                    wordDocument.MainDocumentPart.Document = doc;

                    //wordDocument.Close();
                }

                return StreamHelper.ToArray(mem);

Here is an extension method to help convert the stream into a byte array:
 public static class StreamHelper
    {
        public static byte[] ToArray(Stream s)
        {
            if (s == null)
                throw new ArgumentNullException(nameof(s));
            if (!s.CanRead)
                throw new ArgumentException("Stream cannot be read");

            MemoryStream ms = s as MemoryStream;
            if (ms != null)
                return ms.ToArray();

            long pos = s.CanSeek ? s.Position : 0L;
            if (pos != 0L)
                s.Seek(0, SeekOrigin.Begin);

            byte[] result = new byte[s.Length];
            s.Read(result, 0, result.Length);
            if (s.CanSeek)
                s.Seek(pos, SeekOrigin.Begin);
            return result;
        }
    }

I hope this helps somewhat!


Vince Pendergrass
Consultant
Keyhole Software
Direct: (210) 365-4747 | Google Voice: (210) 365-4748
vpendergrass@keyholesoftware.com | keyholesoftware.com


